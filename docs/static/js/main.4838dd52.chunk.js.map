{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","memes","loading","text","getMemes","_callee","e","main","url","r","json","regenerator_default","a","wrap","_context","prev","next","preventDefault","_this","setState","document","querySelector","firstChild","removeChild","concat","fetch","sent","setTimeout","this","data","bind","Object","assertThisInitialized","stop","_this2","_this$state","react_default","createElement","className","onSubmit","Pane","display","justifyContent","alignItems","height","width","background","hoverElevation","SearchInput","value","placeholder","onChange","target","Button","appearance","iconAfter","disabled","type","intent","isLoading","style","position","top","left","color","margin","ButtonToggle","Spinner","size","map","m","react_addons_css_transition_group_default","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionEnter","transitionLeave","key","id","Image","src","images","fixed_height","showMeme","React","Component","props","onClick","window","open","alt","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4838dd52.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { SearchInput, Pane, Button, Spinner } from 'evergreen-ui'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nclass App extends React.Component {\n  state = {\n    memes: [],\n    loading: false,\n    text: ''\n  }\n\n  getMemes = async (e) => {\n    e.preventDefault()\n    this.setState({loading: true })\n    var main = document.querySelector(\"main\")\n    while (main.firstChild) {\n      main.removeChild(main.firstChild)\n    }\n    var key = 'khF3tS3mArkkgXfLFPgI4YIKIEatC5Ta'\n    var url = `http://api.giphy.com/v1/gifs/search?q=${this.state.text}&api_key=${key}`\n    var r = await fetch(url)\n    var json = await r.json()\n    setTimeout(function () {\n      this.setState({ memes: json.data, loading: false, text: '' })\n    }.bind(this), 600)\n  }\n\n  render() {\n    var { memes, loading, text } = this.state\n    return (\n      <div className=\"App\">\n        <h1>MemeFinder</h1>\n        <form className=\"App-header\" onSubmit={this.getMemes}>\n          <Pane display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={60} width={700} background=\"overlay\" hoverElevation={4} className=\"container\">\n            <SearchInput value={text}\n              width=\"90%\"\n              height={40}\n              placeholder=\"Search for Memes here...\"\n              onChange={e => this.setState({ text: e.target.value })} />\n            <Button appearance=\"primary\" iconAfter=\"arrow-right\" disabled={loading || !text} type=\"submit\" intent=\"none\" isLoading={loading} style={{\n              position: \"absolute\",\n              top: \"14px\",\n              left: \"calc(100% - 77px)\",\n              background: \"aliceblue\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              color: \"black\"\n            }}>{ButtonToggle(loading)}</Button>\n          </Pane>\n        </form>\n        <main>\n          {loading && <Spinner size={64} />}\n          {memes.map(m => showMeme(m))}\n        </main>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\nfunction Image(props) {\n  var { src } = props\n  return (\n    <div className=\"meme\" onClick={() => window.open(src, '_blank')}>\n      <img alt=\"meme\" src={src}></img>\n    </div>\n  )\n}\n\nfunction ButtonToggle(loading) {\n  if (!loading) {\n    return (<p style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", margin: \"0px\" }}>Go</p>)\n  }\n}\n\nfunction showMeme(m) {\n  return (\n    <ReactCSSTransitionGroup\n      transitionName=\"fade\"\n      transitionAppear={true}\n      transitionAppearTimeout={500}\n      transitionEnterTimeout={300}\n      transitionEnter={true}\n      transitionLeave={false}\n      key={m.id}\n    >\n      <Pane hoverElevation={3}>\n        <Image src={m.images.fixed_height.url} />\n      </Pane>\n    </ReactCSSTransitionGroup>\n  )\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}